generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  firstName     String?
  lastName      String?
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  phone         String?
  linkedin      String?
  github        String?
  image         String?
  skills        String?
  address       String?
  city          String?
  postcode      String?
  country       String?
  role          role          @default(APPLICANT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  applications  Application[] @relation("applicant_applications")
  documents     Document[]
  favorites     Favorite[]
  offers        Offer[]
  sessions      Session[]
}

model Offer {
  id                 String        @id @default(uuid())
  title              String
  contractType       String
  location           String
  description        String
  skills             String?
  salary             String?
  company            String
  website            String
  companyDescription String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  userId             String
  categoryId         String?
  applications       Application[] @relation("offer_applications")
  favorites          Favorite[]
  category           Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user               User          @relation(fields: [userId], references: [id])
}

model Application {
  id          String  @id @default(uuid())
  userId      String?
  offerId     String?
  coverLetter String?
  applied     Boolean @default(false)
  offer       Offer?  @relation("offer_applications", fields: [offerId], references: [id], onDelete: Cascade)
  user        User?   @relation("applicant_applications", fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id        String   @id @default(cuid())
  filename  String
  path      String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name_en   String?
  offers    Offer[]
}

model Favorite {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?
  offerId    String?
  isFavorite Boolean  @default(false)
  offer      Offer?   @relation(fields: [offerId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum role {
  CONSULTANT
  APPLICANT
  ADMIN
}
