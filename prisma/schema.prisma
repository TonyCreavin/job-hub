// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @unique @default(uuid())
  firstName     String?
  lastName      String?
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  phone         String?
  linkedin      String?
  github        String?
  image         String?
  skills        String?
  address       String?
  city          String?
  postcode      String?
  country       String?
  applications  Application[] @relation("applicant_applications")
  role          Role          @default(APPLICANT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  offers        Offer[]
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  favorites     Favorite[]
   
}

model Offer {
  id                 String        @id @unique @default(uuid())
  title              String
  contractType       String
  location           String
  description        String
  skills             String?
  salary             String?
  company            String
  website            String
  companyDescription String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  applications       Application[] @relation("offer_applications")
  category Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?
   user User @relation(fields: [userId], references: [id])
  userId String
  favorites Favorite[]
}

model Application {
  id      String @id @unique @default(uuid())
  user    User?   @relation("applicant_applications", fields: [userId], references: [id], onDelete: Cascade)
  userId  String?
  offer   Offer?  @relation("offer_applications", fields: [offerId], references: [id], onDelete: Cascade)
  offerId String?
  coverLetter String?
  applied     Boolean @default(false)
}

enum Role {
  ADMIN
  APPLICANT
  CONSULTANT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Document {
  id        String   @id @default(cuid())
  filename  String
  path      String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  
}

model Category {
  id String @id @unique @default(uuid())
  name String
  name_en String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offers Offer[]
  

}
model Favorite {
  id         String   @id @unique @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User ?    @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId     String?
  offer   Offer? @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId String?
  isFavorite   Boolean @default(false)
}